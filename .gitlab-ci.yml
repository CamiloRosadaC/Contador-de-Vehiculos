stages:
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_IMAGE_TAG: ${CI_COMMIT_SHA}

cache:
  paths:
    - .venv/
    - .pip-cache/

test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  before_script:
    # Limpiar espacio y caché agresivamente
    - rm -rf /var/lib/apt/lists/* /var/cache/apt/* /var/lib/dpkg/*-old /var/tmp/* /tmp/*
    - apt-get clean
    # Limpiar Docker
    - docker system prune -af || true
    # Limpiar pip cache
    - rm -rf ~/.cache/pip
    # Actualizar e instalar solo lo esencial
    - apt-get update
    - apt-get install -y --no-install-recommends curl ca-certificates libgl1 libglib2.0-0
    - rm -rf /var/lib/apt/lists/*
    # Configurar pip para usar menos espacio
    - python -m venv .venv --without-pip
    - source .venv/bin/activate
    - curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python get-pip.py --no-cache-dir
    - rm get-pip.py
    # Instalar dependencias de manera optimizada
    - pip install --no-cache-dir numpy==1.24.0
    - pip install --no-cache-dir matplotlib==3.7.1
    - pip install --no-cache-dir -r requirements-web.txt
    # Limpiar todo el caché posible
    - rm -rf ~/.cache/pip /tmp/* /var/tmp/*
  script:
    # Ejecutar únicamente pruebas core y utilidades (evitamos UI/grpc/headless)
    - pytest tests/test_counter.py tests/test_detector_mapping.py -v tests/test_utils.py::test_winsound_beep_on_non_windows -v
  only:
    - main
    - merge_requests

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache python3 py3-pip
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  script:
    - docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
    - docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_IMAGE_NAME}:latest
      fi
  only:
    - main
    - merge_requests

deploy:
  stage: deploy
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    # DO_SSH_KEY debe estar en base64 (lo decodificamos aquí)
    - echo "$DO_SSH_KEY" | base64 -d | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H $DO_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh $DO_USER@$DO_HOST "
        echo \"${CI_REGISTRY_PASSWORD}\" | docker login -u \"${CI_REGISTRY_USER}\" --password-stdin \"${CI_REGISTRY}\"
        docker ps -q --filter name=contador-vehiculos | grep -q . && docker stop contador-vehiculos || true
        docker rm -f contador-vehiculos || true
        docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
        docker run -d --name contador-vehiculos --restart unless-stopped -p 8501:8501 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
        docker image prune -f
      "
  environment:
    name: production
    url: http://${DO_HOST}:8501
  only:
    - main
